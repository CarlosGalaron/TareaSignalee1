GIT(2005): control de verisones distribuído.

- Ayuda: git --help/ git -h

COMANDOS

- Genérico
LS listar
CD + tab movernos enter directorios
CD .. carpeta superior
PWD nos da nuestra ruta actual
MKDIR "nombreDir" crear carpeta
code . abrir VS code (ej)


- Configurar git
git config --global user.name "CarlosGalaron"
git config --global user.email "Carlos.galaron@gmail.com
git congif --global alias.nombreAlias "instrucción a renombrar" (para dar alias a instrucciones)

- Crear fichero
touch(LINUX) crear fichero
WINDOWS --> type nul > nombredetuarchivo.txt


- Crear area de trabajo
CLONE
|->git close ENLACE  (clona un repositorio)a carpeta con un clon del proyecto del repositorio remoto) 
INIT
|->git init (dentro del folder del proyecto: crea la rama principal de git)


- Trabajo de directorios:
ADD añade archivos de contenido al index. git add ApuntesGitGithub.txt
MV mueve o renombra un archivo/directorio/symlink
RESTORE restaura los archivos de una rama main
RM elimina archivos de la rama main y del index

- Ignorar archivos:
type nul > .gitignore (creamos .gitignore) 
en .gitignore  -> **/.nombreArchivo. luego añades .gitignore y commiteas


- Analisis de estado:
BISECT busca el commit que introdujo un bug
DIFF muestra los cambios entre commits y entre commit y rama principal
--> git diff (nos da el archivo y los cambios en líneas de código)
GREP pinta líneas siguiendo un patron
log muestra los commit logs
SHOW muetra objetos
STATUS muestra el estado de la rama principal

ADD añade archivos de contenido al index --> git add ApuntesGitGithub.txt
--> git add . (añade todo)

COMMIT guarda cambios en el repositorio.  --> git commit -m "feat subir apuntes"

STATUS --> git status

LOG --> git log nos da la info de los commits. si no esta comiteado nos dira que el archivo ha sido modificado
--> git log --graph
--> git log --graph pretty=oneline
--> git log --graph decorate all --oneline

CHECKOUT --> git checkout ID (para volver al que marque cada ID. donde marquemos es el HEAD) (le podemos dar un id del log)

RESET --> git reset (para volver al ultimo estado apuntado por el HEAD)
--> git reset --hard (hace desaparecer todo lo posterior al HEAD) (también puede resetear un reset y recuperar lo que has borrado)
-->reglog (para ver los cambios, incluso archivos eliminados ya que los commit se quedan "a fuego")

TAG suelen ser las versiones de la aplicación
--> git tag dia_1
--> git tag nos da el listado de tags del repositorio
--> git checkout tags/dia_1 (cambia el HEAD a la versión con el tag dia_1)
--git checkout main (volvemos al final)

REVERT (se carga un commit y crea un commit más avanzado)

- Trabajo con ramas:
BRANCH lista, crea o elimina ramas
--> git branch -m main (para renombrar mi rama a main(rama principal))
--> git Branch login (crea la nueva rama "login")
-->git Branch -d login (para eliminar la rama login)

SWITCH
-->git switch login (para cambiar a la rama login)

MERGE une dos o más historiales de desarrollo
--> git switch login --> git add . --> git commit -m "parámetros de commit" --> git merge main (traemos los datos de main a login

STASH (para hacer commit "temporal" que no afecta al árbol y solo está en mi local)
--> git stash (si no haces stash de una versión no commitead no puedes cambiar de rama)--> git switch …
--> git stash pop (para recuperar las versiones en stash)
--> git stash drop (para eliminar las versiones en stash de la rama actual

DIFF (II)
--> git diff BranchName(nos dice en que diferimos con la rama "BranchName")
--> git merge BranchName (mergea la rama "branchName" a la rama en la que estamos situados

GITHUB funciona como servidor de repositorios, red social, y CV
|-> La documentación esta toda en github

- Crear repositorio
|-> nombre de repositorio (recomendandado el rimero con tu nombre para que esté en la pagina de inicio)
|-> publico o privado
|->ReadMe (manual del repositorio)
|-> License. Puede ser código abierto pero con licencia.

-SSH (para la autenticación de git)
*******Buscar y seguir mejor la documentación de GitHub para Windows, Moure usa Mac!!!!!!

|-> en el directorio oculto .SSH del directorio raíz de nuestro disco
|->ls -al ∼/.ssh (ñ sin la n, donde esta???) (para listar si hay claves)
- Desde GIT en el 
|-> ssh-keygen -t ed25519 -C "micorreo@correo.com"
|-> nos pide un nombre para el fichero, recomendado id_rsa (genera id_rsa y id_rsa.pub
|-> nos pide una contraseña (passphrase), se puede o no dejar vacío (enter para vacío)
|-> eval "$(ssh-agent -s)" (llamamos al agente para evaluar si esta funcionando)
|-> touch ∼/.ssh/config (creamos un archivo en la carpeta .ssh que se llame config) (sustituir por type nul > config para windows)
|-> añadimos en el fichero config:
Host ].github.com
	AddKeysToAgent yes
	UseKeyChain yes
	IdentityFile ñ/.ssh/id_rsa

--> Para mas info en GitHub (https://docs.github.com/es/authentication/)

Creamos repositorio en GitHub
Desde VS Code:
-->git init
-->git add README.md
-->git commit -m "first commit"
-->git Branch -M main
-->git remote add origin git@github.com:CarlosGalaron/nombreRepo.git
-->git push -u origin main

O pusheamos un repositorio ya existente
(git push origin)
-->git remote add origin ENLACE
-->git Branch -M main
-->git push -u origin main
Puede que de problemas para hacer un push origin si estas por detrás en local, para solucionarlo hacer pull origin (-->git pull origin main
) si no te deja puedes forzarlo (-->git pull origin main --allow-unrelated-histories)

REBASE aplica commits sobre base tip?
RESET reinicia el HEAD? a un estado específico


- Colaboración y sincronización
PULL
|-> git pull (descarga los cambios desde el repositorio al local)

PUSH
|->git push (envía los cambios desde el local al repo de GitHub)

FETCH descarga objetos y referencias (refs) de otro repositorio
|-> git fetch (descarga el historial de cambios pero no los cambios)

MERGE para reconciliar las ramas. mecanismo por defecto recomendado (rebase y fastforward para otros casos)
|->git merge origin main (para mergear el repo remoto y la rama main en local)

REBASE (trasladamos una rama al frente del flujo de trabajo)
-->git rebase branchName
-->git -i, --continue, --abort (para hacerlo por pasos)

CHERRYPICK (extraer un commit concreto a otra rama)
-->git cherry-pick idcommit
(podemos hacer un git log para buscar ese idcommit)


fork --> descargas un repositorio y lo haces "propio"(lo clonas), a partir de ahora los cambios que hagas puedes pushearlos a tu propio repositorio. 
sync fork --> para incorporar tus cambios al repositorio original

PULL REQUEST (PR) de HEAD a base repository.
\->Hay que aceptarlo y mergearlo. se pueden intercambiar comentarios

CONFLICTOS recomendable resolver desde Github. realizar cambios y marcar resuelto --> commit en la rama que proceda --> merge pull request

GITKRAKEN como entorno gráfico
GIT FLOW (convenio estandarizado de modo de trabajo con github)
\->brew install git-flow
-->git flow
-->git flow init
-->git flow release start (abrir rama)
-->git flow release finish (cerrar rama)
-->git flow feature(rama) start 2auth(fichero)

GITHUB PAGES
Para desplegar el repositorio y transformarlo en web si cumples ciertos requisitos. wonderfulamazing

GITHUB ACTIONS
Automatizaciones. Ej: que haga testing cuando se mergea a la rama dev etc etc etc
